
traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000e08  00000e9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800066  00800066  00000ea2  2**0
                  ALLOC
  3 .stab         00001e48  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001550  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f7 06 	call	0xdee	; 0xdee <main>
  8a:	0c 94 02 07 	jmp	0xe04	; 0xe04 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
  bc:	80 91 66 00 	lds	r24, 0x0066
  c0:	90 91 67 00 	lds	r25, 0x0067
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	29 f0       	breq	.+10     	; 0xd2 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
  c8:	e0 91 66 00 	lds	r30, 0x0066
  cc:	f0 91 67 00 	lds	r31, 0x0067
  d0:	09 95       	icall
	}
}
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	7f 91       	pop	r23
  e4:	6f 91       	pop	r22
  e6:	5f 91       	pop	r21
  e8:	4f 91       	pop	r20
  ea:	3f 91       	pop	r19
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
 122:	80 91 66 00 	lds	r24, 0x0066
 126:	90 91 67 00 	lds	r25, 0x0067
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	29 f0       	breq	.+10     	; 0x138 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
 12e:	e0 91 66 00 	lds	r30, 0x0066
 132:	f0 91 67 00 	lds	r31, 0x0067
 136:	09 95       	icall
	}
}
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <Timer1_init>:
 *                      Functions definitions                                   *
 *******************************************************************************/
/* Description:
 * Function to initialize the Timer driver */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
 15e:	df 93       	push	r29
 160:	cf 93       	push	r28
 162:	00 d0       	rcall	.+0      	; 0x164 <Timer1_init+0x6>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to zero */
 16c:	ac e4       	ldi	r26, 0x4C	; 76
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	e9 81       	ldd	r30, Y+1	; 0x01
 172:	fa 81       	ldd	r31, Y+2	; 0x02
 174:	80 81       	ld	r24, Z
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	11 96       	adiw	r26, 0x01	; 1
 17a:	9c 93       	st	X, r25
 17c:	8e 93       	st	-X, r24

	if(Config_Ptr->mode==NORMAL_MODE)
 17e:	e9 81       	ldd	r30, Y+1	; 0x01
 180:	fa 81       	ldd	r31, Y+2	; 0x02
 182:	85 81       	ldd	r24, Z+5	; 0x05
 184:	88 23       	and	r24, r24
 186:	79 f4       	brne	.+30     	; 0x1a6 <Timer1_init+0x48>
	{
		TIMSK&=~(1<<OCIE1A); /* disable compare mode interrupt*/
 188:	a9 e5       	ldi	r26, 0x59	; 89
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	e9 e5       	ldi	r30, 0x59	; 89
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	8f 7e       	andi	r24, 0xEF	; 239
 194:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1);/* Enable normal mode interrupt*/
 196:	a9 e5       	ldi	r26, 0x59	; 89
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	e9 e5       	ldi	r30, 0x59	; 89
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	8c 93       	st	X, r24
 1a4:	1c c0       	rjmp	.+56     	; 0x1de <Timer1_init+0x80>
	}
	else if (Config_Ptr->mode==COMPARE_MODE)
 1a6:	e9 81       	ldd	r30, Y+1	; 0x01
 1a8:	fa 81       	ldd	r31, Y+2	; 0x02
 1aa:	85 81       	ldd	r24, Z+5	; 0x05
 1ac:	88 30       	cpi	r24, 0x08	; 8
 1ae:	b9 f4       	brne	.+46     	; 0x1de <Timer1_init+0x80>
	{
		TIMSK&=~(1<<TOIE1);/* disable normal mode interrupt*/
 1b0:	a9 e5       	ldi	r26, 0x59	; 89
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e9 e5       	ldi	r30, 0x59	; 89
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8b 7f       	andi	r24, 0xFB	; 251
 1bc:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;     /* Set the Compare value  */
 1be:	aa e4       	ldi	r26, 0x4A	; 74
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e9 81       	ldd	r30, Y+1	; 0x01
 1c4:	fa 81       	ldd	r31, Y+2	; 0x02
 1c6:	82 81       	ldd	r24, Z+2	; 0x02
 1c8:	93 81       	ldd	r25, Z+3	; 0x03
 1ca:	11 96       	adiw	r26, 0x01	; 1
 1cc:	9c 93       	st	X, r25
 1ce:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
 1d0:	a9 e5       	ldi	r26, 0x59	; 89
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	e9 e5       	ldi	r30, 0x59	; 89
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 61       	ori	r24, 0x10	; 16
 1dc:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=1
	 * 3. CTC & normal Modes WGM10=0 WGM11=0 (Modes Number 0&4)
	 */
	TCCR1A = (1<<FOC1A)|(1<<FOC1B);
 1de:	ef e4       	ldi	r30, 0x4F	; 79
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0
	 * 2. Prescaler = Config_Ptr->prescaler
	 */
	TCCR1B = (Config_Ptr->mode) | (Config_Ptr->prescaler);
 1e6:	ae e4       	ldi	r26, 0x4E	; 78
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e9 81       	ldd	r30, Y+1	; 0x01
 1ec:	fa 81       	ldd	r31, Y+2	; 0x02
 1ee:	95 81       	ldd	r25, Z+5	; 0x05
 1f0:	e9 81       	ldd	r30, Y+1	; 0x01
 1f2:	fa 81       	ldd	r31, Y+2	; 0x02
 1f4:	84 81       	ldd	r24, Z+4	; 0x04
 1f6:	89 2b       	or	r24, r25
 1f8:	8c 93       	st	X, r24
}
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <Timer1_deInit>:

/* Description:
 * Function to disable the Timer1. */
void Timer1_deInit(void)
{
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
	TIMSK=0;
 20c:	e9 e5       	ldi	r30, 0x59	; 89
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	10 82       	st	Z, r1
	TCCR1A=0;
 212:	ef e4       	ldi	r30, 0x4F	; 79
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	10 82       	st	Z, r1
	TCCR1B=0;
 218:	ee e4       	ldi	r30, 0x4E	; 78
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	10 82       	st	Z, r1
	OCR1A=0;
 21e:	ea e4       	ldi	r30, 0x4A	; 74
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	11 82       	std	Z+1, r1	; 0x01
 224:	10 82       	st	Z, r1
	TCNT1=0;
 226:	ec e4       	ldi	r30, 0x4C	; 76
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	11 82       	std	Z+1, r1	; 0x01
 22c:	10 82       	st	Z, r1

}
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	08 95       	ret

00000234 <Timer1_setCallBack>:

/* Description:
 * Function to set the Call Back function address. */
void Timer1_setCallBack(void(*a_ptr)(void))
{
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	00 d0       	rcall	.+0      	; 0x23a <Timer1_setCallBack+0x6>
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	9a 83       	std	Y+2, r25	; 0x02
 240:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
 246:	90 93 67 00 	sts	0x0067, r25
 24a:	80 93 66 00 	sts	0x0066, r24
}
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	cf 91       	pop	r28
 254:	df 91       	pop	r29
 256:	08 95       	ret

00000258 <__vector_1>:
/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/* External INT0 Interrupt Service Routine */
ISR(INT0_vect)
{
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
 27a:	df 93       	push	r29
 27c:	cf 93       	push	r28
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
 282:	80 91 68 00 	lds	r24, 0x0068
 286:	90 91 69 00 	lds	r25, 0x0069
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	29 f0       	breq	.+10     	; 0x298 <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
 28e:	e0 91 68 00 	lds	r30, 0x0068
 292:	f0 91 69 00 	lds	r31, 0x0069
 296:	09 95       	icall
	}

}
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <INT0_Init>:

/* External INT0 enable and configuration function */
void INT0_Init(void)
{
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
 2c6:	a1 e3       	ldi	r26, 0x31	; 49
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e1 e3       	ldi	r30, 0x31	; 49
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	8b 7f       	andi	r24, 0xFB	; 251
 2d2:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the Rising Edge
 2d4:	a5 e5       	ldi	r26, 0x55	; 85
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e5 e5       	ldi	r30, 0x55	; 85
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	83 60       	ori	r24, 0x03	; 3
 2e0:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
 2e2:	ab e5       	ldi	r26, 0x5B	; 91
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	eb e5       	ldi	r30, 0x5B	; 91
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	8c 93       	st	X, r24

}
 2f0:	cf 91       	pop	r28
 2f2:	df 91       	pop	r29
 2f4:	08 95       	ret

000002f6 <INT0_setCallBack>:

/* Description:
 * Function to set the Call Back function address. */
void INT0_setCallBack(void(*a_ptr)(void))
{
 2f6:	df 93       	push	r29
 2f8:	cf 93       	push	r28
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <INT0_setCallBack+0x6>
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	9a 81       	ldd	r25, Y+2	; 0x02
 308:	90 93 69 00 	sts	0x0069, r25
 30c:	80 93 68 00 	sts	0x0068, r24
}
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	08 95       	ret

0000031a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 31a:	df 93       	push	r29
 31c:	cf 93       	push	r28
 31e:	00 d0       	rcall	.+0      	; 0x320 <GPIO_setupPinDirection+0x6>
 320:	00 d0       	rcall	.+0      	; 0x322 <GPIO_setupPinDirection+0x8>
 322:	0f 92       	push	r0
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	89 83       	std	Y+1, r24	; 0x01
 32a:	6a 83       	std	Y+2, r22	; 0x02
 32c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	08 f0       	brcs	.+2      	; 0x336 <GPIO_setupPinDirection+0x1c>
 334:	d5 c0       	rjmp	.+426    	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	84 30       	cpi	r24, 0x04	; 4
 33a:	08 f0       	brcs	.+2      	; 0x33e <GPIO_setupPinDirection+0x24>
 33c:	d1 c0       	rjmp	.+418    	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	28 2f       	mov	r18, r24
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	3d 83       	std	Y+5, r19	; 0x05
 346:	2c 83       	std	Y+4, r18	; 0x04
 348:	8c 81       	ldd	r24, Y+4	; 0x04
 34a:	9d 81       	ldd	r25, Y+5	; 0x05
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	91 05       	cpc	r25, r1
 350:	09 f4       	brne	.+2      	; 0x354 <GPIO_setupPinDirection+0x3a>
 352:	43 c0       	rjmp	.+134    	; 0x3da <GPIO_setupPinDirection+0xc0>
 354:	2c 81       	ldd	r18, Y+4	; 0x04
 356:	3d 81       	ldd	r19, Y+5	; 0x05
 358:	22 30       	cpi	r18, 0x02	; 2
 35a:	31 05       	cpc	r19, r1
 35c:	2c f4       	brge	.+10     	; 0x368 <GPIO_setupPinDirection+0x4e>
 35e:	8c 81       	ldd	r24, Y+4	; 0x04
 360:	9d 81       	ldd	r25, Y+5	; 0x05
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	71 f0       	breq	.+28     	; 0x382 <GPIO_setupPinDirection+0x68>
 366:	bc c0       	rjmp	.+376    	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
 368:	2c 81       	ldd	r18, Y+4	; 0x04
 36a:	3d 81       	ldd	r19, Y+5	; 0x05
 36c:	22 30       	cpi	r18, 0x02	; 2
 36e:	31 05       	cpc	r19, r1
 370:	09 f4       	brne	.+2      	; 0x374 <GPIO_setupPinDirection+0x5a>
 372:	5f c0       	rjmp	.+190    	; 0x432 <GPIO_setupPinDirection+0x118>
 374:	8c 81       	ldd	r24, Y+4	; 0x04
 376:	9d 81       	ldd	r25, Y+5	; 0x05
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	91 05       	cpc	r25, r1
 37c:	09 f4       	brne	.+2      	; 0x380 <GPIO_setupPinDirection+0x66>
 37e:	85 c0       	rjmp	.+266    	; 0x48a <GPIO_setupPinDirection+0x170>
 380:	af c0       	rjmp	.+350    	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	a1 f4       	brne	.+40     	; 0x3b0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 388:	aa e3       	ldi	r26, 0x3A	; 58
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	ea e3       	ldi	r30, 0x3A	; 58
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	48 2f       	mov	r20, r24
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	28 2f       	mov	r18, r24
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 2e       	mov	r0, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <GPIO_setupPinDirection+0x8c>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <GPIO_setupPinDirection+0x88>
 3aa:	84 2b       	or	r24, r20
 3ac:	8c 93       	st	X, r24
 3ae:	98 c0       	rjmp	.+304    	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 3b0:	aa e3       	ldi	r26, 0x3A	; 58
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	ea e3       	ldi	r30, 0x3A	; 58
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	48 2f       	mov	r20, r24
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 2e       	mov	r0, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <GPIO_setupPinDirection+0xb4>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <GPIO_setupPinDirection+0xb0>
 3d2:	80 95       	com	r24
 3d4:	84 23       	and	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	83 c0       	rjmp	.+262    	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	a1 f4       	brne	.+40     	; 0x408 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 3e0:	a7 e3       	ldi	r26, 0x37	; 55
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	e7 e3       	ldi	r30, 0x37	; 55
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	48 2f       	mov	r20, r24
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 2e       	mov	r0, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <GPIO_setupPinDirection+0xe4>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <GPIO_setupPinDirection+0xe0>
 402:	84 2b       	or	r24, r20
 404:	8c 93       	st	X, r24
 406:	6c c0       	rjmp	.+216    	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 408:	a7 e3       	ldi	r26, 0x37	; 55
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	e7 e3       	ldi	r30, 0x37	; 55
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <GPIO_setupPinDirection+0x10c>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <GPIO_setupPinDirection+0x108>
 42a:	80 95       	com	r24
 42c:	84 23       	and	r24, r20
 42e:	8c 93       	st	X, r24
 430:	57 c0       	rjmp	.+174    	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	a1 f4       	brne	.+40     	; 0x460 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 438:	a4 e3       	ldi	r26, 0x34	; 52
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e4 e3       	ldi	r30, 0x34	; 52
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	48 2f       	mov	r20, r24
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 2e       	mov	r0, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <GPIO_setupPinDirection+0x13c>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <GPIO_setupPinDirection+0x138>
 45a:	84 2b       	or	r24, r20
 45c:	8c 93       	st	X, r24
 45e:	40 c0       	rjmp	.+128    	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 460:	a4 e3       	ldi	r26, 0x34	; 52
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e4 e3       	ldi	r30, 0x34	; 52
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	48 2f       	mov	r20, r24
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	28 2f       	mov	r18, r24
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 2e       	mov	r0, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <GPIO_setupPinDirection+0x164>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <GPIO_setupPinDirection+0x160>
 482:	80 95       	com	r24
 484:	84 23       	and	r24, r20
 486:	8c 93       	st	X, r24
 488:	2b c0       	rjmp	.+86     	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 48a:	8b 81       	ldd	r24, Y+3	; 0x03
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	a1 f4       	brne	.+40     	; 0x4b8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 490:	a1 e3       	ldi	r26, 0x31	; 49
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	e1 e3       	ldi	r30, 0x31	; 49
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <GPIO_setupPinDirection+0x194>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <GPIO_setupPinDirection+0x190>
 4b2:	84 2b       	or	r24, r20
 4b4:	8c 93       	st	X, r24
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 4b8:	a1 e3       	ldi	r26, 0x31	; 49
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	e1 e3       	ldi	r30, 0x31	; 49
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	48 2f       	mov	r20, r24
 4c4:	8a 81       	ldd	r24, Y+2	; 0x02
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 2e       	mov	r0, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <GPIO_setupPinDirection+0x1bc>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <GPIO_setupPinDirection+0x1b8>
 4da:	80 95       	com	r24
 4dc:	84 23       	and	r24, r20
 4de:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	cf 91       	pop	r28
 4ec:	df 91       	pop	r29
 4ee:	08 95       	ret

000004f0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 4f0:	df 93       	push	r29
 4f2:	cf 93       	push	r28
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <GPIO_writePin+0x6>
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <GPIO_writePin+0x8>
 4f8:	0f 92       	push	r0
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	89 83       	std	Y+1, r24	; 0x01
 500:	6a 83       	std	Y+2, r22	; 0x02
 502:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	88 30       	cpi	r24, 0x08	; 8
 508:	08 f0       	brcs	.+2      	; 0x50c <GPIO_writePin+0x1c>
 50a:	d5 c0       	rjmp	.+426    	; 0x6b6 <GPIO_writePin+0x1c6>
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	84 30       	cpi	r24, 0x04	; 4
 510:	08 f0       	brcs	.+2      	; 0x514 <GPIO_writePin+0x24>
 512:	d1 c0       	rjmp	.+418    	; 0x6b6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	3d 83       	std	Y+5, r19	; 0x05
 51c:	2c 83       	std	Y+4, r18	; 0x04
 51e:	8c 81       	ldd	r24, Y+4	; 0x04
 520:	9d 81       	ldd	r25, Y+5	; 0x05
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	91 05       	cpc	r25, r1
 526:	09 f4       	brne	.+2      	; 0x52a <GPIO_writePin+0x3a>
 528:	43 c0       	rjmp	.+134    	; 0x5b0 <GPIO_writePin+0xc0>
 52a:	2c 81       	ldd	r18, Y+4	; 0x04
 52c:	3d 81       	ldd	r19, Y+5	; 0x05
 52e:	22 30       	cpi	r18, 0x02	; 2
 530:	31 05       	cpc	r19, r1
 532:	2c f4       	brge	.+10     	; 0x53e <GPIO_writePin+0x4e>
 534:	8c 81       	ldd	r24, Y+4	; 0x04
 536:	9d 81       	ldd	r25, Y+5	; 0x05
 538:	00 97       	sbiw	r24, 0x00	; 0
 53a:	71 f0       	breq	.+28     	; 0x558 <GPIO_writePin+0x68>
 53c:	bc c0       	rjmp	.+376    	; 0x6b6 <GPIO_writePin+0x1c6>
 53e:	2c 81       	ldd	r18, Y+4	; 0x04
 540:	3d 81       	ldd	r19, Y+5	; 0x05
 542:	22 30       	cpi	r18, 0x02	; 2
 544:	31 05       	cpc	r19, r1
 546:	09 f4       	brne	.+2      	; 0x54a <GPIO_writePin+0x5a>
 548:	5f c0       	rjmp	.+190    	; 0x608 <GPIO_writePin+0x118>
 54a:	8c 81       	ldd	r24, Y+4	; 0x04
 54c:	9d 81       	ldd	r25, Y+5	; 0x05
 54e:	83 30       	cpi	r24, 0x03	; 3
 550:	91 05       	cpc	r25, r1
 552:	09 f4       	brne	.+2      	; 0x556 <GPIO_writePin+0x66>
 554:	85 c0       	rjmp	.+266    	; 0x660 <GPIO_writePin+0x170>
 556:	af c0       	rjmp	.+350    	; 0x6b6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	a1 f4       	brne	.+40     	; 0x586 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 55e:	ab e3       	ldi	r26, 0x3B	; 59
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	eb e3       	ldi	r30, 0x3B	; 59
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	48 2f       	mov	r20, r24
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 2e       	mov	r0, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <GPIO_writePin+0x8c>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <GPIO_writePin+0x88>
 580:	84 2b       	or	r24, r20
 582:	8c 93       	st	X, r24
 584:	98 c0       	rjmp	.+304    	; 0x6b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 586:	ab e3       	ldi	r26, 0x3B	; 59
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	eb e3       	ldi	r30, 0x3B	; 59
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	48 2f       	mov	r20, r24
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 2e       	mov	r0, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <GPIO_writePin+0xb4>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <GPIO_writePin+0xb0>
 5a8:	80 95       	com	r24
 5aa:	84 23       	and	r24, r20
 5ac:	8c 93       	st	X, r24
 5ae:	83 c0       	rjmp	.+262    	; 0x6b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	a1 f4       	brne	.+40     	; 0x5de <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 5b6:	a8 e3       	ldi	r26, 0x38	; 56
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e8 e3       	ldi	r30, 0x38	; 56
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	48 2f       	mov	r20, r24
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 2e       	mov	r0, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <GPIO_writePin+0xe4>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <GPIO_writePin+0xe0>
 5d8:	84 2b       	or	r24, r20
 5da:	8c 93       	st	X, r24
 5dc:	6c c0       	rjmp	.+216    	; 0x6b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 5de:	a8 e3       	ldi	r26, 0x38	; 56
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	e8 e3       	ldi	r30, 0x38	; 56
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	48 2f       	mov	r20, r24
 5ea:	8a 81       	ldd	r24, Y+2	; 0x02
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 2e       	mov	r0, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <GPIO_writePin+0x10c>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	0a 94       	dec	r0
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <GPIO_writePin+0x108>
 600:	80 95       	com	r24
 602:	84 23       	and	r24, r20
 604:	8c 93       	st	X, r24
 606:	57 c0       	rjmp	.+174    	; 0x6b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	a1 f4       	brne	.+40     	; 0x636 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 60e:	a5 e3       	ldi	r26, 0x35	; 53
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	e5 e3       	ldi	r30, 0x35	; 53
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	48 2f       	mov	r20, r24
 61a:	8a 81       	ldd	r24, Y+2	; 0x02
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 2e       	mov	r0, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <GPIO_writePin+0x13c>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <GPIO_writePin+0x138>
 630:	84 2b       	or	r24, r20
 632:	8c 93       	st	X, r24
 634:	40 c0       	rjmp	.+128    	; 0x6b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 636:	a5 e3       	ldi	r26, 0x35	; 53
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	e5 e3       	ldi	r30, 0x35	; 53
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	48 2f       	mov	r20, r24
 642:	8a 81       	ldd	r24, Y+2	; 0x02
 644:	28 2f       	mov	r18, r24
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 2e       	mov	r0, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <GPIO_writePin+0x164>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	0a 94       	dec	r0
 656:	e2 f7       	brpl	.-8      	; 0x650 <GPIO_writePin+0x160>
 658:	80 95       	com	r24
 65a:	84 23       	and	r24, r20
 65c:	8c 93       	st	X, r24
 65e:	2b c0       	rjmp	.+86     	; 0x6b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	a1 f4       	brne	.+40     	; 0x68e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 666:	a2 e3       	ldi	r26, 0x32	; 50
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	e2 e3       	ldi	r30, 0x32	; 50
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	48 2f       	mov	r20, r24
 672:	8a 81       	ldd	r24, Y+2	; 0x02
 674:	28 2f       	mov	r18, r24
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 2e       	mov	r0, r18
 67e:	02 c0       	rjmp	.+4      	; 0x684 <GPIO_writePin+0x194>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	0a 94       	dec	r0
 686:	e2 f7       	brpl	.-8      	; 0x680 <GPIO_writePin+0x190>
 688:	84 2b       	or	r24, r20
 68a:	8c 93       	st	X, r24
 68c:	14 c0       	rjmp	.+40     	; 0x6b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 68e:	a2 e3       	ldi	r26, 0x32	; 50
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	e2 e3       	ldi	r30, 0x32	; 50
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	48 2f       	mov	r20, r24
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 2e       	mov	r0, r18
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <GPIO_writePin+0x1bc>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	0a 94       	dec	r0
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <GPIO_writePin+0x1b8>
 6b0:	80 95       	com	r24
 6b2:	84 23       	and	r24, r20
 6b4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	cf 91       	pop	r28
 6c2:	df 91       	pop	r29
 6c4:	08 95       	ret

000006c6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 6c6:	df 93       	push	r29
 6c8:	cf 93       	push	r28
 6ca:	00 d0       	rcall	.+0      	; 0x6cc <GPIO_readPin+0x6>
 6cc:	00 d0       	rcall	.+0      	; 0x6ce <GPIO_readPin+0x8>
 6ce:	0f 92       	push	r0
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	8a 83       	std	Y+2, r24	; 0x02
 6d6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 6d8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	88 30       	cpi	r24, 0x08	; 8
 6de:	08 f0       	brcs	.+2      	; 0x6e2 <GPIO_readPin+0x1c>
 6e0:	84 c0       	rjmp	.+264    	; 0x7ea <GPIO_readPin+0x124>
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	84 30       	cpi	r24, 0x04	; 4
 6e6:	08 f0       	brcs	.+2      	; 0x6ea <GPIO_readPin+0x24>
 6e8:	80 c0       	rjmp	.+256    	; 0x7ea <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	28 2f       	mov	r18, r24
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	3d 83       	std	Y+5, r19	; 0x05
 6f2:	2c 83       	std	Y+4, r18	; 0x04
 6f4:	4c 81       	ldd	r20, Y+4	; 0x04
 6f6:	5d 81       	ldd	r21, Y+5	; 0x05
 6f8:	41 30       	cpi	r20, 0x01	; 1
 6fa:	51 05       	cpc	r21, r1
 6fc:	79 f1       	breq	.+94     	; 0x75c <GPIO_readPin+0x96>
 6fe:	8c 81       	ldd	r24, Y+4	; 0x04
 700:	9d 81       	ldd	r25, Y+5	; 0x05
 702:	82 30       	cpi	r24, 0x02	; 2
 704:	91 05       	cpc	r25, r1
 706:	34 f4       	brge	.+12     	; 0x714 <GPIO_readPin+0x4e>
 708:	2c 81       	ldd	r18, Y+4	; 0x04
 70a:	3d 81       	ldd	r19, Y+5	; 0x05
 70c:	21 15       	cp	r18, r1
 70e:	31 05       	cpc	r19, r1
 710:	69 f0       	breq	.+26     	; 0x72c <GPIO_readPin+0x66>
 712:	6b c0       	rjmp	.+214    	; 0x7ea <GPIO_readPin+0x124>
 714:	4c 81       	ldd	r20, Y+4	; 0x04
 716:	5d 81       	ldd	r21, Y+5	; 0x05
 718:	42 30       	cpi	r20, 0x02	; 2
 71a:	51 05       	cpc	r21, r1
 71c:	b9 f1       	breq	.+110    	; 0x78c <GPIO_readPin+0xc6>
 71e:	8c 81       	ldd	r24, Y+4	; 0x04
 720:	9d 81       	ldd	r25, Y+5	; 0x05
 722:	83 30       	cpi	r24, 0x03	; 3
 724:	91 05       	cpc	r25, r1
 726:	09 f4       	brne	.+2      	; 0x72a <GPIO_readPin+0x64>
 728:	49 c0       	rjmp	.+146    	; 0x7bc <GPIO_readPin+0xf6>
 72a:	5f c0       	rjmp	.+190    	; 0x7ea <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 72c:	e9 e3       	ldi	r30, 0x39	; 57
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	28 2f       	mov	r18, r24
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	88 2f       	mov	r24, r24
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	a9 01       	movw	r20, r18
 73e:	02 c0       	rjmp	.+4      	; 0x744 <GPIO_readPin+0x7e>
 740:	55 95       	asr	r21
 742:	47 95       	ror	r20
 744:	8a 95       	dec	r24
 746:	e2 f7       	brpl	.-8      	; 0x740 <GPIO_readPin+0x7a>
 748:	ca 01       	movw	r24, r20
 74a:	81 70       	andi	r24, 0x01	; 1
 74c:	90 70       	andi	r25, 0x00	; 0
 74e:	88 23       	and	r24, r24
 750:	19 f0       	breq	.+6      	; 0x758 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	89 83       	std	Y+1, r24	; 0x01
 756:	49 c0       	rjmp	.+146    	; 0x7ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 758:	19 82       	std	Y+1, r1	; 0x01
 75a:	47 c0       	rjmp	.+142    	; 0x7ea <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 75c:	e6 e3       	ldi	r30, 0x36	; 54
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	28 2f       	mov	r18, r24
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	8b 81       	ldd	r24, Y+3	; 0x03
 768:	88 2f       	mov	r24, r24
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	a9 01       	movw	r20, r18
 76e:	02 c0       	rjmp	.+4      	; 0x774 <GPIO_readPin+0xae>
 770:	55 95       	asr	r21
 772:	47 95       	ror	r20
 774:	8a 95       	dec	r24
 776:	e2 f7       	brpl	.-8      	; 0x770 <GPIO_readPin+0xaa>
 778:	ca 01       	movw	r24, r20
 77a:	81 70       	andi	r24, 0x01	; 1
 77c:	90 70       	andi	r25, 0x00	; 0
 77e:	88 23       	and	r24, r24
 780:	19 f0       	breq	.+6      	; 0x788 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	89 83       	std	Y+1, r24	; 0x01
 786:	31 c0       	rjmp	.+98     	; 0x7ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 788:	19 82       	std	Y+1, r1	; 0x01
 78a:	2f c0       	rjmp	.+94     	; 0x7ea <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 78c:	e3 e3       	ldi	r30, 0x33	; 51
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	28 2f       	mov	r18, r24
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	88 2f       	mov	r24, r24
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	a9 01       	movw	r20, r18
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <GPIO_readPin+0xde>
 7a0:	55 95       	asr	r21
 7a2:	47 95       	ror	r20
 7a4:	8a 95       	dec	r24
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <GPIO_readPin+0xda>
 7a8:	ca 01       	movw	r24, r20
 7aa:	81 70       	andi	r24, 0x01	; 1
 7ac:	90 70       	andi	r25, 0x00	; 0
 7ae:	88 23       	and	r24, r24
 7b0:	19 f0       	breq	.+6      	; 0x7b8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	89 83       	std	Y+1, r24	; 0x01
 7b6:	19 c0       	rjmp	.+50     	; 0x7ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 7b8:	19 82       	std	Y+1, r1	; 0x01
 7ba:	17 c0       	rjmp	.+46     	; 0x7ea <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 7bc:	e0 e3       	ldi	r30, 0x30	; 48
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	28 2f       	mov	r18, r24
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	88 2f       	mov	r24, r24
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	a9 01       	movw	r20, r18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <GPIO_readPin+0x10e>
 7d0:	55 95       	asr	r21
 7d2:	47 95       	ror	r20
 7d4:	8a 95       	dec	r24
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <GPIO_readPin+0x10a>
 7d8:	ca 01       	movw	r24, r20
 7da:	81 70       	andi	r24, 0x01	; 1
 7dc:	90 70       	andi	r25, 0x00	; 0
 7de:	88 23       	and	r24, r24
 7e0:	19 f0       	breq	.+6      	; 0x7e8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	89 83       	std	Y+1, r24	; 0x01
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 7e8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 7ea:	89 81       	ldd	r24, Y+1	; 0x01
}
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	0f 90       	pop	r0
 7f2:	0f 90       	pop	r0
 7f4:	0f 90       	pop	r0
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	08 95       	ret

000007fc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 7fc:	df 93       	push	r29
 7fe:	cf 93       	push	r28
 800:	00 d0       	rcall	.+0      	; 0x802 <GPIO_setupPortDirection+0x6>
 802:	00 d0       	rcall	.+0      	; 0x804 <GPIO_setupPortDirection+0x8>
 804:	cd b7       	in	r28, 0x3d	; 61
 806:	de b7       	in	r29, 0x3e	; 62
 808:	89 83       	std	Y+1, r24	; 0x01
 80a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 80c:	89 81       	ldd	r24, Y+1	; 0x01
 80e:	84 30       	cpi	r24, 0x04	; 4
 810:	90 f5       	brcc	.+100    	; 0x876 <__stack+0x17>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 812:	89 81       	ldd	r24, Y+1	; 0x01
 814:	28 2f       	mov	r18, r24
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	3c 83       	std	Y+4, r19	; 0x04
 81a:	2b 83       	std	Y+3, r18	; 0x03
 81c:	8b 81       	ldd	r24, Y+3	; 0x03
 81e:	9c 81       	ldd	r25, Y+4	; 0x04
 820:	81 30       	cpi	r24, 0x01	; 1
 822:	91 05       	cpc	r25, r1
 824:	d1 f0       	breq	.+52     	; 0x85a <GPIO_setupPortDirection+0x5e>
 826:	2b 81       	ldd	r18, Y+3	; 0x03
 828:	3c 81       	ldd	r19, Y+4	; 0x04
 82a:	22 30       	cpi	r18, 0x02	; 2
 82c:	31 05       	cpc	r19, r1
 82e:	2c f4       	brge	.+10     	; 0x83a <GPIO_setupPortDirection+0x3e>
 830:	8b 81       	ldd	r24, Y+3	; 0x03
 832:	9c 81       	ldd	r25, Y+4	; 0x04
 834:	00 97       	sbiw	r24, 0x00	; 0
 836:	61 f0       	breq	.+24     	; 0x850 <GPIO_setupPortDirection+0x54>
 838:	1e c0       	rjmp	.+60     	; 0x876 <__stack+0x17>
 83a:	2b 81       	ldd	r18, Y+3	; 0x03
 83c:	3c 81       	ldd	r19, Y+4	; 0x04
 83e:	22 30       	cpi	r18, 0x02	; 2
 840:	31 05       	cpc	r19, r1
 842:	81 f0       	breq	.+32     	; 0x864 <__stack+0x5>
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	9c 81       	ldd	r25, Y+4	; 0x04
 848:	83 30       	cpi	r24, 0x03	; 3
 84a:	91 05       	cpc	r25, r1
 84c:	81 f0       	breq	.+32     	; 0x86e <__stack+0xf>
 84e:	13 c0       	rjmp	.+38     	; 0x876 <__stack+0x17>
		{
		case PORTA_ID:
			DDRA = direction;
 850:	ea e3       	ldi	r30, 0x3A	; 58
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	8a 81       	ldd	r24, Y+2	; 0x02
 856:	80 83       	st	Z, r24
 858:	0e c0       	rjmp	.+28     	; 0x876 <__stack+0x17>
			break;
		case PORTB_ID:
			DDRB = direction;
 85a:	e7 e3       	ldi	r30, 0x37	; 55
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	8a 81       	ldd	r24, Y+2	; 0x02
 860:	80 83       	st	Z, r24
 862:	09 c0       	rjmp	.+18     	; 0x876 <__stack+0x17>
			break;
		case PORTC_ID:
			DDRC = direction;
 864:	e4 e3       	ldi	r30, 0x34	; 52
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	8a 81       	ldd	r24, Y+2	; 0x02
 86a:	80 83       	st	Z, r24
 86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
			break;
		case PORTD_ID:
			DDRD = direction;
 86e:	e1 e3       	ldi	r30, 0x31	; 49
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	8a 81       	ldd	r24, Y+2	; 0x02
 874:	80 83       	st	Z, r24
			break;
		}
	}
}
 876:	0f 90       	pop	r0
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	0f 90       	pop	r0
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	08 95       	ret

00000884 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 884:	df 93       	push	r29
 886:	cf 93       	push	r28
 888:	00 d0       	rcall	.+0      	; 0x88a <GPIO_writePort+0x6>
 88a:	00 d0       	rcall	.+0      	; 0x88c <GPIO_writePort+0x8>
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
 890:	89 83       	std	Y+1, r24	; 0x01
 892:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	84 30       	cpi	r24, 0x04	; 4
 898:	90 f5       	brcc	.+100    	; 0x8fe <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 89a:	89 81       	ldd	r24, Y+1	; 0x01
 89c:	28 2f       	mov	r18, r24
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	3c 83       	std	Y+4, r19	; 0x04
 8a2:	2b 83       	std	Y+3, r18	; 0x03
 8a4:	8b 81       	ldd	r24, Y+3	; 0x03
 8a6:	9c 81       	ldd	r25, Y+4	; 0x04
 8a8:	81 30       	cpi	r24, 0x01	; 1
 8aa:	91 05       	cpc	r25, r1
 8ac:	d1 f0       	breq	.+52     	; 0x8e2 <GPIO_writePort+0x5e>
 8ae:	2b 81       	ldd	r18, Y+3	; 0x03
 8b0:	3c 81       	ldd	r19, Y+4	; 0x04
 8b2:	22 30       	cpi	r18, 0x02	; 2
 8b4:	31 05       	cpc	r19, r1
 8b6:	2c f4       	brge	.+10     	; 0x8c2 <GPIO_writePort+0x3e>
 8b8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ba:	9c 81       	ldd	r25, Y+4	; 0x04
 8bc:	00 97       	sbiw	r24, 0x00	; 0
 8be:	61 f0       	breq	.+24     	; 0x8d8 <GPIO_writePort+0x54>
 8c0:	1e c0       	rjmp	.+60     	; 0x8fe <GPIO_writePort+0x7a>
 8c2:	2b 81       	ldd	r18, Y+3	; 0x03
 8c4:	3c 81       	ldd	r19, Y+4	; 0x04
 8c6:	22 30       	cpi	r18, 0x02	; 2
 8c8:	31 05       	cpc	r19, r1
 8ca:	81 f0       	breq	.+32     	; 0x8ec <GPIO_writePort+0x68>
 8cc:	8b 81       	ldd	r24, Y+3	; 0x03
 8ce:	9c 81       	ldd	r25, Y+4	; 0x04
 8d0:	83 30       	cpi	r24, 0x03	; 3
 8d2:	91 05       	cpc	r25, r1
 8d4:	81 f0       	breq	.+32     	; 0x8f6 <GPIO_writePort+0x72>
 8d6:	13 c0       	rjmp	.+38     	; 0x8fe <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 8d8:	eb e3       	ldi	r30, 0x3B	; 59
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	80 83       	st	Z, r24
 8e0:	0e c0       	rjmp	.+28     	; 0x8fe <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 8e2:	e8 e3       	ldi	r30, 0x38	; 56
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	8a 81       	ldd	r24, Y+2	; 0x02
 8e8:	80 83       	st	Z, r24
 8ea:	09 c0       	rjmp	.+18     	; 0x8fe <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 8ec:	e5 e3       	ldi	r30, 0x35	; 53
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	80 83       	st	Z, r24
 8f4:	04 c0       	rjmp	.+8      	; 0x8fe <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 8f6:	e2 e3       	ldi	r30, 0x32	; 50
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	8a 81       	ldd	r24, Y+2	; 0x02
 8fc:	80 83       	st	Z, r24
			break;
		}
	}
}
 8fe:	0f 90       	pop	r0
 900:	0f 90       	pop	r0
 902:	0f 90       	pop	r0
 904:	0f 90       	pop	r0
 906:	cf 91       	pop	r28
 908:	df 91       	pop	r29
 90a:	08 95       	ret

0000090c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 90c:	df 93       	push	r29
 90e:	cf 93       	push	r28
 910:	00 d0       	rcall	.+0      	; 0x912 <GPIO_readPort+0x6>
 912:	00 d0       	rcall	.+0      	; 0x914 <GPIO_readPort+0x8>
 914:	cd b7       	in	r28, 0x3d	; 61
 916:	de b7       	in	r29, 0x3e	; 62
 918:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 91a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	84 30       	cpi	r24, 0x04	; 4
 920:	90 f5       	brcc	.+100    	; 0x986 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 922:	8a 81       	ldd	r24, Y+2	; 0x02
 924:	28 2f       	mov	r18, r24
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	3c 83       	std	Y+4, r19	; 0x04
 92a:	2b 83       	std	Y+3, r18	; 0x03
 92c:	8b 81       	ldd	r24, Y+3	; 0x03
 92e:	9c 81       	ldd	r25, Y+4	; 0x04
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	91 05       	cpc	r25, r1
 934:	d1 f0       	breq	.+52     	; 0x96a <GPIO_readPort+0x5e>
 936:	2b 81       	ldd	r18, Y+3	; 0x03
 938:	3c 81       	ldd	r19, Y+4	; 0x04
 93a:	22 30       	cpi	r18, 0x02	; 2
 93c:	31 05       	cpc	r19, r1
 93e:	2c f4       	brge	.+10     	; 0x94a <GPIO_readPort+0x3e>
 940:	8b 81       	ldd	r24, Y+3	; 0x03
 942:	9c 81       	ldd	r25, Y+4	; 0x04
 944:	00 97       	sbiw	r24, 0x00	; 0
 946:	61 f0       	breq	.+24     	; 0x960 <GPIO_readPort+0x54>
 948:	1e c0       	rjmp	.+60     	; 0x986 <GPIO_readPort+0x7a>
 94a:	2b 81       	ldd	r18, Y+3	; 0x03
 94c:	3c 81       	ldd	r19, Y+4	; 0x04
 94e:	22 30       	cpi	r18, 0x02	; 2
 950:	31 05       	cpc	r19, r1
 952:	81 f0       	breq	.+32     	; 0x974 <GPIO_readPort+0x68>
 954:	8b 81       	ldd	r24, Y+3	; 0x03
 956:	9c 81       	ldd	r25, Y+4	; 0x04
 958:	83 30       	cpi	r24, 0x03	; 3
 95a:	91 05       	cpc	r25, r1
 95c:	81 f0       	breq	.+32     	; 0x97e <GPIO_readPort+0x72>
 95e:	13 c0       	rjmp	.+38     	; 0x986 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 960:	e9 e3       	ldi	r30, 0x39	; 57
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	89 83       	std	Y+1, r24	; 0x01
 968:	0e c0       	rjmp	.+28     	; 0x986 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 96a:	e6 e3       	ldi	r30, 0x36	; 54
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	89 83       	std	Y+1, r24	; 0x01
 972:	09 c0       	rjmp	.+18     	; 0x986 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 974:	e3 e3       	ldi	r30, 0x33	; 51
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	89 83       	std	Y+1, r24	; 0x01
 97c:	04 c0       	rjmp	.+8      	; 0x986 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 97e:	e0 e3       	ldi	r30, 0x30	; 48
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 986:	89 81       	ldd	r24, Y+1	; 0x01
}
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	0f 90       	pop	r0
 98e:	0f 90       	pop	r0
 990:	cf 91       	pop	r28
 992:	df 91       	pop	r29
 994:	08 95       	ret

00000996 <LED_init>:
 *******************************************************************************/

#include"LED.h"

void LED_init(void)
{
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(CARS_LEDs_PORT, GREEN_LED, PIN_OUTPUT);
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	41 e0       	ldi	r20, 0x01	; 1
 9a4:	0e 94 8d 01 	call	0x31a	; 0x31a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(CARS_LEDs_PORT, YELLOW_LED, PIN_OUTPUT);
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	61 e0       	ldi	r22, 0x01	; 1
 9ac:	41 e0       	ldi	r20, 0x01	; 1
 9ae:	0e 94 8d 01 	call	0x31a	; 0x31a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(CARS_LEDs_PORT, RED_LED, PIN_OUTPUT);
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	62 e0       	ldi	r22, 0x02	; 2
 9b6:	41 e0       	ldi	r20, 0x01	; 1
 9b8:	0e 94 8d 01 	call	0x31a	; 0x31a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(pedestrian_LEDs_PORT, GREEN_LED, PIN_OUTPUT);
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	41 e0       	ldi	r20, 0x01	; 1
 9c2:	0e 94 8d 01 	call	0x31a	; 0x31a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(pedestrian_LEDs_PORT, YELLOW_LED, PIN_OUTPUT);
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	61 e0       	ldi	r22, 0x01	; 1
 9ca:	41 e0       	ldi	r20, 0x01	; 1
 9cc:	0e 94 8d 01 	call	0x31a	; 0x31a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(pedestrian_LEDs_PORT, RED_LED, PIN_OUTPUT);
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	62 e0       	ldi	r22, 0x02	; 2
 9d4:	41 e0       	ldi	r20, 0x01	; 1
 9d6:	0e 94 8d 01 	call	0x31a	; 0x31a <GPIO_setupPinDirection>

}
 9da:	cf 91       	pop	r28
 9dc:	df 91       	pop	r29
 9de:	08 95       	ret

000009e0 <LED_ON>:

void LED_ON(uint8 port_num, uint8 pin_num)
{
 9e0:	df 93       	push	r29
 9e2:	cf 93       	push	r28
 9e4:	00 d0       	rcall	.+0      	; 0x9e6 <LED_ON+0x6>
 9e6:	cd b7       	in	r28, 0x3d	; 61
 9e8:	de b7       	in	r29, 0x3e	; 62
 9ea:	89 83       	std	Y+1, r24	; 0x01
 9ec:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
 9ee:	89 81       	ldd	r24, Y+1	; 0x01
 9f0:	6a 81       	ldd	r22, Y+2	; 0x02
 9f2:	41 e0       	ldi	r20, 0x01	; 1
 9f4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <GPIO_writePin>
}
 9f8:	0f 90       	pop	r0
 9fa:	0f 90       	pop	r0
 9fc:	cf 91       	pop	r28
 9fe:	df 91       	pop	r29
 a00:	08 95       	ret

00000a02 <LED_OFF>:

void LED_OFF(uint8 port_num, uint8 pin_num)
{
 a02:	df 93       	push	r29
 a04:	cf 93       	push	r28
 a06:	00 d0       	rcall	.+0      	; 0xa08 <LED_OFF+0x6>
 a08:	cd b7       	in	r28, 0x3d	; 61
 a0a:	de b7       	in	r29, 0x3e	; 62
 a0c:	89 83       	std	Y+1, r24	; 0x01
 a0e:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(port_num, pin_num, LOGIC_LOW);
 a10:	89 81       	ldd	r24, Y+1	; 0x01
 a12:	6a 81       	ldd	r22, Y+2	; 0x02
 a14:	40 e0       	ldi	r20, 0x00	; 0
 a16:	0e 94 78 02 	call	0x4f0	; 0x4f0 <GPIO_writePin>
}
 a1a:	0f 90       	pop	r0
 a1c:	0f 90       	pop	r0
 a1e:	cf 91       	pop	r28
 a20:	df 91       	pop	r29
 a22:	08 95       	ret

00000a24 <Get_Button_state>:
 *      Author: Hussein
 */

#include"button.h"
uint8 Get_Button_state(uint8 port_num, uint8 pin_num)
{
 a24:	df 93       	push	r29
 a26:	cf 93       	push	r28
 a28:	00 d0       	rcall	.+0      	; 0xa2a <Get_Button_state+0x6>
 a2a:	cd b7       	in	r28, 0x3d	; 61
 a2c:	de b7       	in	r29, 0x3e	; 62
 a2e:	89 83       	std	Y+1, r24	; 0x01
 a30:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
 a32:	89 81       	ldd	r24, Y+1	; 0x01
 a34:	6a 81       	ldd	r22, Y+2	; 0x02
 a36:	41 e0       	ldi	r20, 0x01	; 1
 a38:	0e 94 8d 01 	call	0x31a	; 0x31a <GPIO_setupPinDirection>
	return GPIO_readPin(port_num, pin_num);
 a3c:	89 81       	ldd	r24, Y+1	; 0x01
 a3e:	6a 81       	ldd	r22, Y+2	; 0x02
 a40:	0e 94 63 03 	call	0x6c6	; 0x6c6 <GPIO_readPin>
}
 a44:	0f 90       	pop	r0
 a46:	0f 90       	pop	r0
 a48:	cf 91       	pop	r28
 a4a:	df 91       	pop	r29
 a4c:	08 95       	ret

00000a4e <delay_500mSEC>:
static volatile uint8 interrupt_flag=0;

static void pedestrian_mode(void);
/*function called by timer1*/
void delay_500mSEC(void)
{
 a4e:	df 93       	push	r29
 a50:	cf 93       	push	r28
 a52:	cd b7       	in	r28, 0x3d	; 61
 a54:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
 a56:	80 91 6a 00 	lds	r24, 0x006A
 a5a:	8f 5f       	subi	r24, 0xFF	; 255
 a5c:	80 93 6a 00 	sts	0x006A, r24
}
 a60:	cf 91       	pop	r28
 a62:	df 91       	pop	r29
 a64:	08 95       	ret

00000a66 <int0_flag>:
void int0_flag(void)
{
 a66:	df 93       	push	r29
 a68:	cf 93       	push	r28
 a6a:	cd b7       	in	r28, 0x3d	; 61
 a6c:	de b7       	in	r29, 0x3e	; 62

	interrupt_flag++;
 a6e:	80 91 6c 00 	lds	r24, 0x006C
 a72:	8f 5f       	subi	r24, 0xFF	; 255
 a74:	80 93 6c 00 	sts	0x006C, r24

}
 a78:	cf 91       	pop	r28
 a7a:	df 91       	pop	r29
 a7c:	08 95       	ret

00000a7e <Long_press>:
void Long_press(void)
{
 a7e:	df 93       	push	r29
 a80:	cf 93       	push	r28
 a82:	0f 92       	push	r0
 a84:	cd b7       	in	r28, 0x3d	; 61
 a86:	de b7       	in	r29, 0x3e	; 62
	uint8 temp;
	temp=g_tick;
 a88:	80 91 6a 00 	lds	r24, 0x006A
 a8c:	89 83       	std	Y+1, r24	; 0x01
	g_tick=0;
 a8e:	10 92 6a 00 	sts	0x006A, r1
	while(g_tick<1)
 a92:	80 91 6a 00 	lds	r24, 0x006A
 a96:	88 23       	and	r24, r24
 a98:	e1 f3       	breq	.-8      	; 0xa92 <Long_press+0x14>
	{

	}
	g_tick=0;
 a9a:	10 92 6a 00 	sts	0x006A, r1

	if(Get_Button_state(BUTTON_PORT, BUTTON_PIN) == PRESSED)
 a9e:	83 e0       	ldi	r24, 0x03	; 3
 aa0:	62 e0       	ldi	r22, 0x02	; 2
 aa2:	0e 94 12 05 	call	0xa24	; 0xa24 <Get_Button_state>
 aa6:	81 30       	cpi	r24, 0x01	; 1
 aa8:	29 f4       	brne	.+10     	; 0xab4 <Long_press+0x36>
	{
		interrupt_flag++;
 aaa:	80 91 6c 00 	lds	r24, 0x006C
 aae:	8f 5f       	subi	r24, 0xFF	; 255
 ab0:	80 93 6c 00 	sts	0x006C, r24
	}
	g_tick=temp;
 ab4:	89 81       	ldd	r24, Y+1	; 0x01
 ab6:	80 93 6a 00 	sts	0x006A, r24
}
 aba:	0f 90       	pop	r0
 abc:	cf 91       	pop	r28
 abe:	df 91       	pop	r29
 ac0:	08 95       	ret

00000ac2 <app>:

void app(void)
{
 ac2:	df 93       	push	r29
 ac4:	cf 93       	push	r28
 ac6:	cd b7       	in	r28, 0x3d	; 61
 ac8:	de b7       	in	r29, 0x3e	; 62
 aca:	2c 97       	sbiw	r28, 0x0c	; 12
 acc:	0f b6       	in	r0, 0x3f	; 63
 ace:	f8 94       	cli
 ad0:	de bf       	out	0x3e, r29	; 62
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	SREG|=(1<<7); /* enable Global interrupt*/
 ad6:	af e5       	ldi	r26, 0x5F	; 95
 ad8:	b0 e0       	ldi	r27, 0x00	; 0
 ada:	ef e5       	ldi	r30, 0x5F	; 95
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	80 81       	ld	r24, Z
 ae0:	80 68       	ori	r24, 0x80	; 128
 ae2:	8c 93       	st	X, r24
	LED_init();
 ae4:	0e 94 cb 04 	call	0x996	; 0x996 <LED_init>
	INT0_Init();
 ae8:	0e 94 5f 01 	call	0x2be	; 0x2be <INT0_Init>
	Timer1_ConfigType Timer_Conf={0,7813,CLOCK_BY_64,COMPARE_MODE,};
 aec:	ce 01       	movw	r24, r28
 aee:	02 96       	adiw	r24, 0x02	; 2
 af0:	99 87       	std	Y+9, r25	; 0x09
 af2:	88 87       	std	Y+8, r24	; 0x08
 af4:	e0 e6       	ldi	r30, 0x60	; 96
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	fb 87       	std	Y+11, r31	; 0x0b
 afa:	ea 87       	std	Y+10, r30	; 0x0a
 afc:	f6 e0       	ldi	r31, 0x06	; 6
 afe:	fc 87       	std	Y+12, r31	; 0x0c
 b00:	ea 85       	ldd	r30, Y+10	; 0x0a
 b02:	fb 85       	ldd	r31, Y+11	; 0x0b
 b04:	00 80       	ld	r0, Z
 b06:	8a 85       	ldd	r24, Y+10	; 0x0a
 b08:	9b 85       	ldd	r25, Y+11	; 0x0b
 b0a:	01 96       	adiw	r24, 0x01	; 1
 b0c:	9b 87       	std	Y+11, r25	; 0x0b
 b0e:	8a 87       	std	Y+10, r24	; 0x0a
 b10:	e8 85       	ldd	r30, Y+8	; 0x08
 b12:	f9 85       	ldd	r31, Y+9	; 0x09
 b14:	00 82       	st	Z, r0
 b16:	88 85       	ldd	r24, Y+8	; 0x08
 b18:	99 85       	ldd	r25, Y+9	; 0x09
 b1a:	01 96       	adiw	r24, 0x01	; 1
 b1c:	99 87       	std	Y+9, r25	; 0x09
 b1e:	88 87       	std	Y+8, r24	; 0x08
 b20:	9c 85       	ldd	r25, Y+12	; 0x0c
 b22:	91 50       	subi	r25, 0x01	; 1
 b24:	9c 87       	std	Y+12, r25	; 0x0c
 b26:	ec 85       	ldd	r30, Y+12	; 0x0c
 b28:	ee 23       	and	r30, r30
 b2a:	51 f7       	brne	.-44     	; 0xb00 <app+0x3e>
	Timer1_setCallBack(delay_500mSEC);
 b2c:	87 e2       	ldi	r24, 0x27	; 39
 b2e:	95 e0       	ldi	r25, 0x05	; 5
 b30:	0e 94 1a 01 	call	0x234	; 0x234 <Timer1_setCallBack>
	INT0_setCallBack(int0_flag);
 b34:	83 e3       	ldi	r24, 0x33	; 51
 b36:	95 e0       	ldi	r25, 0x05	; 5
 b38:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <INT0_setCallBack>
	Timer1_init(&Timer_Conf);
 b3c:	ce 01       	movw	r24, r28
 b3e:	02 96       	adiw	r24, 0x02	; 2
 b40:	0e 94 af 00 	call	0x15e	; 0x15e <Timer1_init>
	while(1)
	{
		if(g_state_color ==0)
 b44:	80 91 6b 00 	lds	r24, 0x006B
 b48:	88 23       	and	r24, r24
 b4a:	29 f5       	brne	.+74     	; 0xb96 <app+0xd4>
		{
			g_state_color =1;
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	80 93 6b 00 	sts	0x006B, r24
			LED_ON(CARS_LEDs_PORT, GREEN_LED);
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	60 e0       	ldi	r22, 0x00	; 0
 b56:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
			LED_ON(pedestrian_LEDs_PORT, RED_LED);
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	62 e0       	ldi	r22, 0x02	; 2
 b5e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
 b62:	0f c0       	rjmp	.+30     	; 0xb82 <app+0xc0>
			while(g_tick<10){
				if(interrupt_flag==1)
 b64:	80 91 6c 00 	lds	r24, 0x006C
 b68:	81 30       	cpi	r24, 0x01	; 1
 b6a:	59 f4       	brne	.+22     	; 0xb82 <app+0xc0>
				{
					Long_press();
 b6c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Long_press>
					if(interrupt_flag==1)
 b70:	80 91 6c 00 	lds	r24, 0x006C
 b74:	81 30       	cpi	r24, 0x01	; 1
 b76:	29 f4       	brne	.+10     	; 0xb82 <app+0xc0>
					{
					g_state_color=0;
 b78:	10 92 6b 00 	sts	0x006B, r1
					pedestrian_mode();
 b7c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pedestrian_mode>
 b80:	04 c0       	rjmp	.+8      	; 0xb8a <app+0xc8>
		if(g_state_color ==0)
		{
			g_state_color =1;
			LED_ON(CARS_LEDs_PORT, GREEN_LED);
			LED_ON(pedestrian_LEDs_PORT, RED_LED);
			while(g_tick<10){
 b82:	80 91 6a 00 	lds	r24, 0x006A
 b86:	8a 30       	cpi	r24, 0x0A	; 10
 b88:	68 f3       	brcs	.-38     	; 0xb64 <app+0xa2>
					pedestrian_mode();
					break;
					}
				}
			}
			g_tick=0;
 b8a:	10 92 6a 00 	sts	0x006A, r1
			LED_OFF(CARS_LEDs_PORT, GREEN_LED);
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	60 e0       	ldi	r22, 0x00	; 0
 b92:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>

		}

		if(g_state_color==1)
 b96:	80 91 6b 00 	lds	r24, 0x006B
 b9a:	81 30       	cpi	r24, 0x01	; 1
 b9c:	91 f5       	brne	.+100    	; 0xc02 <app+0x140>
		{
			g_state_color =2;
 b9e:	82 e0       	ldi	r24, 0x02	; 2
 ba0:	80 93 6b 00 	sts	0x006B, r24
			for(i=0;i<5;i++)
 ba4:	19 82       	std	Y+1, r1	; 0x01
 ba6:	26 c0       	rjmp	.+76     	; 0xbf4 <app+0x132>
			{
				if(interrupt_flag==1)
 ba8:	80 91 6c 00 	lds	r24, 0x006C
 bac:	81 30       	cpi	r24, 0x01	; 1
 bae:	59 f4       	brne	.+22     	; 0xbc6 <app+0x104>
				{
					Long_press();
 bb0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Long_press>
					if(interrupt_flag==1)
 bb4:	80 91 6c 00 	lds	r24, 0x006C
 bb8:	81 30       	cpi	r24, 0x01	; 1
 bba:	29 f4       	brne	.+10     	; 0xbc6 <app+0x104>
					{
					g_state_color=0;
 bbc:	10 92 6b 00 	sts	0x006B, r1
					pedestrian_mode();
 bc0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pedestrian_mode>
 bc4:	1a c0       	rjmp	.+52     	; 0xbfa <app+0x138>
					break;
					}
				}
				LED_ON(CARS_LEDs_PORT, YELLOW_LED);
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	61 e0       	ldi	r22, 0x01	; 1
 bca:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
				while(g_tick<1){}
 bce:	80 91 6a 00 	lds	r24, 0x006A
 bd2:	88 23       	and	r24, r24
 bd4:	e1 f3       	breq	.-8      	; 0xbce <app+0x10c>
				g_tick=0;
 bd6:	10 92 6a 00 	sts	0x006A, r1
				LED_OFF(CARS_LEDs_PORT, YELLOW_LED);
 bda:	80 e0       	ldi	r24, 0x00	; 0
 bdc:	61 e0       	ldi	r22, 0x01	; 1
 bde:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
				while(g_tick<1){}
 be2:	80 91 6a 00 	lds	r24, 0x006A
 be6:	88 23       	and	r24, r24
 be8:	e1 f3       	breq	.-8      	; 0xbe2 <app+0x120>
				g_tick=0;
 bea:	10 92 6a 00 	sts	0x006A, r1
		}

		if(g_state_color==1)
		{
			g_state_color =2;
			for(i=0;i<5;i++)
 bee:	89 81       	ldd	r24, Y+1	; 0x01
 bf0:	8f 5f       	subi	r24, 0xFF	; 255
 bf2:	89 83       	std	Y+1, r24	; 0x01
 bf4:	89 81       	ldd	r24, Y+1	; 0x01
 bf6:	85 30       	cpi	r24, 0x05	; 5
 bf8:	b8 f2       	brcs	.-82     	; 0xba8 <app+0xe6>
				g_tick=0;
				LED_OFF(CARS_LEDs_PORT, YELLOW_LED);
				while(g_tick<1){}
				g_tick=0;
			}
			LED_OFF(pedestrian_LEDs_PORT, RED_LED);
 bfa:	81 e0       	ldi	r24, 0x01	; 1
 bfc:	62 e0       	ldi	r22, 0x02	; 2
 bfe:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>

		}
		if(g_state_color==2)
 c02:	80 91 6b 00 	lds	r24, 0x006B
 c06:	82 30       	cpi	r24, 0x02	; 2
 c08:	69 f5       	brne	.+90     	; 0xc64 <app+0x1a2>
		{

			LED_ON(CARS_LEDs_PORT, RED_LED);
 c0a:	80 e0       	ldi	r24, 0x00	; 0
 c0c:	62 e0       	ldi	r22, 0x02	; 2
 c0e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
			LED_ON(pedestrian_LEDs_PORT, GREEN_LED);
 c12:	81 e0       	ldi	r24, 0x01	; 1
 c14:	60 e0       	ldi	r22, 0x00	; 0
 c16:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
 c1a:	0f c0       	rjmp	.+30     	; 0xc3a <app+0x178>
			while(g_tick<10){
				if(interrupt_flag==1)
 c1c:	80 91 6c 00 	lds	r24, 0x006C
 c20:	81 30       	cpi	r24, 0x01	; 1
 c22:	59 f4       	brne	.+22     	; 0xc3a <app+0x178>
				{
					Long_press();
 c24:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Long_press>
					if(interrupt_flag==1)
 c28:	80 91 6c 00 	lds	r24, 0x006C
 c2c:	81 30       	cpi	r24, 0x01	; 1
 c2e:	29 f4       	brne	.+10     	; 0xc3a <app+0x178>
					{
					g_state_color=0;
 c30:	10 92 6b 00 	sts	0x006B, r1
					pedestrian_mode();
 c34:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pedestrian_mode>
 c38:	04 c0       	rjmp	.+8      	; 0xc42 <app+0x180>
		if(g_state_color==2)
		{

			LED_ON(CARS_LEDs_PORT, RED_LED);
			LED_ON(pedestrian_LEDs_PORT, GREEN_LED);
			while(g_tick<10){
 c3a:	80 91 6a 00 	lds	r24, 0x006A
 c3e:	8a 30       	cpi	r24, 0x0A	; 10
 c40:	68 f3       	brcs	.-38     	; 0xc1c <app+0x15a>
					pedestrian_mode();
					break;
					}
				}
			}
			if(g_tick==10)
 c42:	80 91 6a 00 	lds	r24, 0x006A
 c46:	8a 30       	cpi	r24, 0x0A	; 10
 c48:	19 f4       	brne	.+6      	; 0xc50 <app+0x18e>
				g_state_color=1;
 c4a:	81 e0       	ldi	r24, 0x01	; 1
 c4c:	80 93 6b 00 	sts	0x006B, r24
			g_tick=0;
 c50:	10 92 6a 00 	sts	0x006A, r1
			LED_OFF(CARS_LEDs_PORT, RED_LED);
 c54:	80 e0       	ldi	r24, 0x00	; 0
 c56:	62 e0       	ldi	r22, 0x02	; 2
 c58:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
			LED_OFF(pedestrian_LEDs_PORT, GREEN_LED);
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	60 e0       	ldi	r22, 0x00	; 0
 c60:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>


		}
		if(g_state_color==1)
 c64:	80 91 6b 00 	lds	r24, 0x006B
 c68:	81 30       	cpi	r24, 0x01	; 1
 c6a:	09 f0       	breq	.+2      	; 0xc6e <app+0x1ac>
 c6c:	6b cf       	rjmp	.-298    	; 0xb44 <app+0x82>
		{
			g_state_color=0;
 c6e:	10 92 6b 00 	sts	0x006B, r1
			for(i=0;i<5;i++)
 c72:	19 82       	std	Y+1, r1	; 0x01
 c74:	24 c0       	rjmp	.+72     	; 0xcbe <app+0x1fc>
			{
				if(interrupt_flag==1)
 c76:	80 91 6c 00 	lds	r24, 0x006C
 c7a:	81 30       	cpi	r24, 0x01	; 1
 c7c:	49 f4       	brne	.+18     	; 0xc90 <app+0x1ce>
				{
					Long_press();
 c7e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Long_press>
					if(interrupt_flag==1)
 c82:	80 91 6c 00 	lds	r24, 0x006C
 c86:	81 30       	cpi	r24, 0x01	; 1
 c88:	19 f4       	brne	.+6      	; 0xc90 <app+0x1ce>
					{
					pedestrian_mode();
 c8a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pedestrian_mode>
 c8e:	5a cf       	rjmp	.-332    	; 0xb44 <app+0x82>
					break;
					}
				}
				LED_ON(CARS_LEDs_PORT, YELLOW_LED);
 c90:	80 e0       	ldi	r24, 0x00	; 0
 c92:	61 e0       	ldi	r22, 0x01	; 1
 c94:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
				while(g_tick<1){}
 c98:	80 91 6a 00 	lds	r24, 0x006A
 c9c:	88 23       	and	r24, r24
 c9e:	e1 f3       	breq	.-8      	; 0xc98 <app+0x1d6>
				g_tick=0;
 ca0:	10 92 6a 00 	sts	0x006A, r1
				LED_OFF(CARS_LEDs_PORT, YELLOW_LED);
 ca4:	80 e0       	ldi	r24, 0x00	; 0
 ca6:	61 e0       	ldi	r22, 0x01	; 1
 ca8:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
				while(g_tick<1){}
 cac:	80 91 6a 00 	lds	r24, 0x006A
 cb0:	88 23       	and	r24, r24
 cb2:	e1 f3       	breq	.-8      	; 0xcac <app+0x1ea>
				g_tick=0;
 cb4:	10 92 6a 00 	sts	0x006A, r1

		}
		if(g_state_color==1)
		{
			g_state_color=0;
			for(i=0;i<5;i++)
 cb8:	89 81       	ldd	r24, Y+1	; 0x01
 cba:	8f 5f       	subi	r24, 0xFF	; 255
 cbc:	89 83       	std	Y+1, r24	; 0x01
 cbe:	89 81       	ldd	r24, Y+1	; 0x01
 cc0:	85 30       	cpi	r24, 0x05	; 5
 cc2:	c8 f2       	brcs	.-78     	; 0xc76 <app+0x1b4>
 cc4:	3f cf       	rjmp	.-386    	; 0xb44 <app+0x82>

00000cc6 <pedestrian_mode>:
	}

}

void pedestrian_mode(void)
{
 cc6:	df 93       	push	r29
 cc8:	cf 93       	push	r28
 cca:	0f 92       	push	r0
 ccc:	cd b7       	in	r28, 0x3d	; 61
 cce:	de b7       	in	r29, 0x3e	; 62
	uint8 i;

	if(g_state_color==2)
 cd0:	80 91 6b 00 	lds	r24, 0x006B
 cd4:	82 30       	cpi	r24, 0x02	; 2
 cd6:	c9 f4       	brne	.+50     	; 0xd0a <pedestrian_mode+0x44>
	{
		g_tick=0;
 cd8:	10 92 6a 00 	sts	0x006A, r1
		LED_ON(CARS_LEDs_PORT, RED_LED);
 cdc:	80 e0       	ldi	r24, 0x00	; 0
 cde:	62 e0       	ldi	r22, 0x02	; 2
 ce0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
		LED_ON(pedestrian_LEDs_PORT, GREEN_LED);
 ce4:	81 e0       	ldi	r24, 0x01	; 1
 ce6:	60 e0       	ldi	r22, 0x00	; 0
 ce8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
		while(g_tick<10){}
 cec:	80 91 6a 00 	lds	r24, 0x006A
 cf0:	8a 30       	cpi	r24, 0x0A	; 10
 cf2:	e0 f3       	brcs	.-8      	; 0xcec <pedestrian_mode+0x26>
		g_tick=0;
 cf4:	10 92 6a 00 	sts	0x006A, r1
		LED_OFF(CARS_LEDs_PORT, RED_LED);
 cf8:	80 e0       	ldi	r24, 0x00	; 0
 cfa:	62 e0       	ldi	r22, 0x02	; 2
 cfc:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
		LED_OFF(pedestrian_LEDs_PORT, GREEN_LED);
 d00:	81 e0       	ldi	r24, 0x01	; 1
 d02:	60 e0       	ldi	r22, 0x00	; 0
 d04:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
 d08:	3c c0       	rjmp	.+120    	; 0xd82 <pedestrian_mode+0xbc>
	}
	else
	{
		for(i=0;i<5;i++)
 d0a:	19 82       	std	Y+1, r1	; 0x01
 d0c:	1f c0       	rjmp	.+62     	; 0xd4c <pedestrian_mode+0x86>
		{
			LED_ON(CARS_LEDs_PORT, YELLOW_LED);
 d0e:	80 e0       	ldi	r24, 0x00	; 0
 d10:	61 e0       	ldi	r22, 0x01	; 1
 d12:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
			LED_ON(pedestrian_LEDs_PORT, YELLOW_LED);
 d16:	81 e0       	ldi	r24, 0x01	; 1
 d18:	61 e0       	ldi	r22, 0x01	; 1
 d1a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
			while(g_tick<1){}
 d1e:	80 91 6a 00 	lds	r24, 0x006A
 d22:	88 23       	and	r24, r24
 d24:	e1 f3       	breq	.-8      	; 0xd1e <pedestrian_mode+0x58>
			g_tick=0;
 d26:	10 92 6a 00 	sts	0x006A, r1
			LED_OFF(CARS_LEDs_PORT, YELLOW_LED);
 d2a:	80 e0       	ldi	r24, 0x00	; 0
 d2c:	61 e0       	ldi	r22, 0x01	; 1
 d2e:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
			LED_OFF(pedestrian_LEDs_PORT, YELLOW_LED);
 d32:	81 e0       	ldi	r24, 0x01	; 1
 d34:	61 e0       	ldi	r22, 0x01	; 1
 d36:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
			while(g_tick<1){}
 d3a:	80 91 6a 00 	lds	r24, 0x006A
 d3e:	88 23       	and	r24, r24
 d40:	e1 f3       	breq	.-8      	; 0xd3a <pedestrian_mode+0x74>
			g_tick=0;
 d42:	10 92 6a 00 	sts	0x006A, r1
		LED_OFF(CARS_LEDs_PORT, RED_LED);
		LED_OFF(pedestrian_LEDs_PORT, GREEN_LED);
	}
	else
	{
		for(i=0;i<5;i++)
 d46:	89 81       	ldd	r24, Y+1	; 0x01
 d48:	8f 5f       	subi	r24, 0xFF	; 255
 d4a:	89 83       	std	Y+1, r24	; 0x01
 d4c:	89 81       	ldd	r24, Y+1	; 0x01
 d4e:	85 30       	cpi	r24, 0x05	; 5
 d50:	f0 f2       	brcs	.-68     	; 0xd0e <pedestrian_mode+0x48>
			LED_OFF(pedestrian_LEDs_PORT, YELLOW_LED);
			while(g_tick<1){}
			g_tick=0;
		}

		LED_OFF(pedestrian_LEDs_PORT, RED_LED);
 d52:	81 e0       	ldi	r24, 0x01	; 1
 d54:	62 e0       	ldi	r22, 0x02	; 2
 d56:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
		LED_OFF(CARS_LEDs_PORT, GREEN_LED);
 d5a:	80 e0       	ldi	r24, 0x00	; 0
 d5c:	60 e0       	ldi	r22, 0x00	; 0
 d5e:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
		g_tick=0;
 d62:	10 92 6a 00 	sts	0x006A, r1

		LED_ON(CARS_LEDs_PORT, RED_LED);
 d66:	80 e0       	ldi	r24, 0x00	; 0
 d68:	62 e0       	ldi	r22, 0x02	; 2
 d6a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
		LED_ON(pedestrian_LEDs_PORT, GREEN_LED);
 d6e:	81 e0       	ldi	r24, 0x01	; 1
 d70:	60 e0       	ldi	r22, 0x00	; 0
 d72:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
		while(g_tick<10){}
 d76:	80 91 6a 00 	lds	r24, 0x006A
 d7a:	8a 30       	cpi	r24, 0x0A	; 10
 d7c:	e0 f3       	brcs	.-8      	; 0xd76 <pedestrian_mode+0xb0>
		g_tick=0;
 d7e:	10 92 6a 00 	sts	0x006A, r1
	}

	for(i=0;i<5;i++)
 d82:	19 82       	std	Y+1, r1	; 0x01
 d84:	1f c0       	rjmp	.+62     	; 0xdc4 <pedestrian_mode+0xfe>
	{
		LED_ON(CARS_LEDs_PORT, YELLOW_LED);
 d86:	80 e0       	ldi	r24, 0x00	; 0
 d88:	61 e0       	ldi	r22, 0x01	; 1
 d8a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
		LED_ON(pedestrian_LEDs_PORT, YELLOW_LED);
 d8e:	81 e0       	ldi	r24, 0x01	; 1
 d90:	61 e0       	ldi	r22, 0x01	; 1
 d92:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>
		while(g_tick<1){}
 d96:	80 91 6a 00 	lds	r24, 0x006A
 d9a:	88 23       	and	r24, r24
 d9c:	e1 f3       	breq	.-8      	; 0xd96 <pedestrian_mode+0xd0>
		g_tick=0;
 d9e:	10 92 6a 00 	sts	0x006A, r1
		LED_OFF(CARS_LEDs_PORT, YELLOW_LED);
 da2:	80 e0       	ldi	r24, 0x00	; 0
 da4:	61 e0       	ldi	r22, 0x01	; 1
 da6:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
		LED_OFF(pedestrian_LEDs_PORT, YELLOW_LED);
 daa:	81 e0       	ldi	r24, 0x01	; 1
 dac:	61 e0       	ldi	r22, 0x01	; 1
 dae:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
		while(g_tick<1){}
 db2:	80 91 6a 00 	lds	r24, 0x006A
 db6:	88 23       	and	r24, r24
 db8:	e1 f3       	breq	.-8      	; 0xdb2 <pedestrian_mode+0xec>
		g_tick=0;
 dba:	10 92 6a 00 	sts	0x006A, r1
		LED_ON(pedestrian_LEDs_PORT, GREEN_LED);
		while(g_tick<10){}
		g_tick=0;
	}

	for(i=0;i<5;i++)
 dbe:	89 81       	ldd	r24, Y+1	; 0x01
 dc0:	8f 5f       	subi	r24, 0xFF	; 255
 dc2:	89 83       	std	Y+1, r24	; 0x01
 dc4:	89 81       	ldd	r24, Y+1	; 0x01
 dc6:	85 30       	cpi	r24, 0x05	; 5
 dc8:	f0 f2       	brcs	.-68     	; 0xd86 <pedestrian_mode+0xc0>
		LED_OFF(CARS_LEDs_PORT, YELLOW_LED);
		LED_OFF(pedestrian_LEDs_PORT, YELLOW_LED);
		while(g_tick<1){}
		g_tick=0;
	}
	LED_OFF(pedestrian_LEDs_PORT, GREEN_LED);
 dca:	81 e0       	ldi	r24, 0x01	; 1
 dcc:	60 e0       	ldi	r22, 0x00	; 0
 dce:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
	LED_OFF(CARS_LEDs_PORT, RED_LED);
 dd2:	80 e0       	ldi	r24, 0x00	; 0
 dd4:	62 e0       	ldi	r22, 0x02	; 2
 dd6:	0e 94 01 05 	call	0xa02	; 0xa02 <LED_OFF>
	LED_ON(pedestrian_LEDs_PORT, RED_LED);
 dda:	81 e0       	ldi	r24, 0x01	; 1
 ddc:	62 e0       	ldi	r22, 0x02	; 2
 dde:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LED_ON>

	interrupt_flag=0;
 de2:	10 92 6c 00 	sts	0x006C, r1
}
 de6:	0f 90       	pop	r0
 de8:	cf 91       	pop	r28
 dea:	df 91       	pop	r29
 dec:	08 95       	ret

00000dee <main>:
 *      Author: Hussein
 */

#include"Application/app.h"
int main(void)
{
 dee:	df 93       	push	r29
 df0:	cf 93       	push	r28
 df2:	cd b7       	in	r28, 0x3d	; 61
 df4:	de b7       	in	r29, 0x3e	; 62
	app();
 df6:	0e 94 61 05 	call	0xac2	; 0xac2 <app>
 dfa:	80 e0       	ldi	r24, 0x00	; 0
 dfc:	90 e0       	ldi	r25, 0x00	; 0

}
 dfe:	cf 91       	pop	r28
 e00:	df 91       	pop	r29
 e02:	08 95       	ret

00000e04 <_exit>:
 e04:	f8 94       	cli

00000e06 <__stop_program>:
 e06:	ff cf       	rjmp	.-2      	; 0xe06 <__stop_program>
